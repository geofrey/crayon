HEX = {};
for (i = 0; i < 10; ++i) {
	HEX['' + i] = i;
}
for (i = 0; i < 6; ++i) {
	HEX['abcdef'[i]] = 10 + i;
	HEX['ABCDEF'[i]] = 10 + i;
}

// This model of the HTTP request is generated by passing the result 
// of the HTTP response from an echo server on crayonlang.org
class HttpRequest {
	constructor(raw_body_of_response) {
		lines = raw_body_of_response.split('\n');
		this.queries = {};
		this.headers = {};
		this.method = null;
		this.body = null;
		this.valid = true;
		
		for (line : lines) {
			parts = line.split(':');
			switch (parts[0]) {
				case 'METHOD': this.method = parts[1]; break;
				case 'QUERY': this.queries[parts[1]] = this.escape_hex(parts[2]); break;
				case 'HEADER':
					value = this.headers.get(parts[1], null);
					if (value != null) {
						if ($typeof(value) == 'string') {
							value = [value];
						}
						value.add(this.escape_hex(parts[2]));
						this.headers[parts[1]] = value;
					} else {
						this.headers[parts[1]] = this.escape_hex(parts[2]); 
					}
					break;
				case 'BODY': this.body = parts[1] == 'nada' ? null : this.escape_hex(parts[1]); break;
				default:
					this.valid = false;
					$print("ECHO SERVER IS RETURNING STRANGE STUFF!");
					$print("Received this:");
					$print(raw_body_of_response);
					return;
			}
		}
	}
	
	function escape_hex(string) {
		output = [];
		for (i = 0; i < string.length; i += 2) {
			a = HEX[string[i]];
			b = HEX[string[i + 1]];
			c = a * 16 + b;
			output.add($chr(c));
		}
		return output.join('');
	}
}

class HttpTest : TestClass {
	constructor() : base() {
		this.previous_request = null;
	}
	
	function get_tests() {
		return [
			this.test_trivial_get,
			this.test_trivial_post,
			this.test_queries,
			this.test_headers,
		];
	}
	
	function test_trivial_get() {
		req = this.previous_request;
		if (req == null) {
			this.previous_request = $http_request(
				'GET', 
				'http://www.crayonlang.org/http_unit_test_echo.php', 
				null, 
				null);
		} else {
			if (req.completed) {
				this.previous_request = null;
				response = new HttpRequest(req.content);
				if (this.assert('GET', response.method)) return "Method did not match";
				if (this.assert({}, response.queries)) return "Queries did not match";
				headers = response.headers.keys();
				headers.sort();
				if (this.assert('[Cache-Control, Connection, Host, User-Agent]', headers)) return "Unexpected headers sent";
				if (this.assert(null, response.body)) return "Body was sent";
				return null;
			}
		}
		return true;
	}
	
	function test_trivial_post() {
		req = this.previous_request;
		body = "Sample Body\r\n&'\t";
		if (req == null) {
			this.previous_request = $http_request(
				'POST', 
				'http://www.crayonlang.org/http_unit_test_echo.php', 
				null, 
				body);
		} else {
			if (req.completed) {
				this.previous_request = null;
				response = new HttpRequest(req.content);
				if (this.assert('POST', response.method)) return "Method did not match";
				if (this.assert({}, response.queries)) return "Queries did not match";
				headers = response.headers.keys();
				headers.sort();
				if (this.assert('[Cache-Control, Connection, Host, User-Agent]', headers)) return "Unexpected headers sent";
				if (this.assert(body, response.body)) return "Body was sent";
				return null;
			}
		}
		return true;
	}
	
	function test_queries() {
		req = this.previous_request;
		if (req == null) {
			this.previous_request = $http_request(
				'GET',
				// TODO: test repeated queries
				'http://www.crayonlang.org/http_unit_test_echo.php?a=leprechaun&foo=special+characters%20weeeeee', 
				null, 
				null);
		} else {
			if (req.completed) {
				this.previous_request = null;
				response = new HttpRequest(req.content);
				if (this.assert('GET', response.method)) return "Method did not match";
				if (this.assert(2, response.queries.length)) return "Queries did not match";
				if (this.assert('leprechaun', response.queries['a'])) return "a != leprechaun";
				if (this.assert('special characters weeeeee', response.queries['foo'])) return "foo != special characters weeeeee";
				headers = response.headers.keys();
				headers.sort();
				if (this.assert('[Cache-Control, Connection, Host, User-Agent]', headers)) return "Unexpected headers sent";
				if (this.assert(null, response.body)) return "Body was sent";
				return null;
			}
		}
		return true;
	}
	
	function test_headers() {
		req = this.previous_request;
		if (req == null) {
			this.previous_request = $http_request(
				'GET',
				// TODO: test repeated queries
				'http://www.crayonlang.org/http_unit_test_echo.php',
				{
					'Foo-Header': "This;is;a;test",
					'User-Agent': "Crayon Unit Tests", // JavaScript will reject this.
					'Bar-Header': ["This is set", "multiple times", "like cookies"]
				},
				null);
		} else {
			if (req.completed) {
				this.previous_request = null;
				response = new HttpRequest(req.content);
				if (this.assert('GET', response.method)) return "Method did not match";
				if (this.assert(0, response.queries.length)) return "Queries did not match";
				headers = response.headers.keys();
				headers.sort();
				if (this.assert('[Bar-Header, Cache-Control, Connection, Foo-Header, Host, User-Agent]', headers)) return "Unexpected headers sent";
				if (this.assert('This;is;a;test', response.headers['Foo-Header'])) return "Foo-Header is not correct.";
				bar = response.headers['Bar-Header'];
				if ($typeof(bar) == 'string') {
					// TODO: all platforms should sent headers multiple times rather than concatenate with commas.
					// The accompanying else statement is the actual desired result. In the mean time, this will have to do...
					if (this.assert('This is set,multiple times,like cookies', bar.replace(', ', ','))) return "Bar-Header is not correct.";
				} else {
					if (this.assert(3, bar.length)) return "Bar-Header was not included 3 times";
					if (this.assert("This is set", bar[0])) return "Bar-Header part 1";
					if (this.assert("multiple times", bar[1])) return "Bar-Header part 2";
					if (this.assert("like cookies", bar[2])) return "Bar-Header part3";
				}
				if (this.assert(null, response.body)) return "Body was sent";
				return null;
			}
		}
		return true;
	}
}