$print("The Everything Test.");

import 'Scene.cry';
import 'TestClass.cry';

import 'DrawingTest.cry';
import 'GeneralDiskTest.cry';
import 'ImageSheetTest.cry';
import 'HttpTest.cry';
import 'MusicTest.cry';
import 'SoundTest.cry';
import 'UserDataTest.cry';

class ImageLibrary {
	
	constructor() {
		this.id = 0;
		this.images = {};
		this.loading = {};
	}
	
	function get_image(path) {
		img = this.images.get(path, null);
		if (img == null) {
			loader = this.loading.get(path, null);
			if (loader == null) {
				loader = 'load_' + this.id++;
				this.loading[path] = loader;
				$gfx_image_load_from_resource(loader, path);
			}
			
			if ($gfx_is_image_loaded(loader)) {
				img = $gfx_image_get(loader);
				this.images[path] = img;
			}
		}
		return img;
	}
}

IMAGE_LIBRARY = new ImageLibrary();

function get_image(path) {
	return IMAGE_LIBRARY.get_image(path);
}

class MainMenu : Scene {
	constructor() : base() {
		this.images = null;
		this.click_regions = [];
		this.user_data_image = null;
		this.target_xy = null;
		this.current_xy = null;
		this.counter = 0;
	}
	
	function update() {
		this.counter++;
		new_xy = null;
		for (event : $game_pump_events()) {
			if (event.is_mouse) {
				if (event.type == 'mousemove') {
					new_xy = [event.x, event.y];
				} else if (event.type == 'mouseleftdown') {
					this.click_on(event.x, event.y);
				}
			}
		}
		
		
		if (this.current_xy == null) {
			this.current_xy = new_xy;
			this.target_xy = new_xy;
		} else  {
			if (new_xy != null) {
				this.target_xy = new_xy;
			}
			
			this.current_xy[0] = (this.target_xy[0] + this.current_xy[0] * 9) / 10.0;
			this.current_xy[1] = (this.target_xy[1] + this.current_xy[1] * 9) / 10.0;
		}
	}
	
	function click_on(x, y) {
		for (region : this.click_regions) {
			if (x >= region[1] && y >= region[2]) {
				left = region[1];
				top = region[2];
				width = region[3];
				height = region[4];
				right = left + width;
				bottom = top + height;
				if (x <= right && y <= bottom) {
					this.invoke(region[0]);
				}
			}
		}
	}
	
	function invoke(id) {
		switch (id) {
			case 'http': this.next = new HttpTest(); break;
			case 'user_data': this.next = new UserDataTest(); break;
			case 'exit': this.end_game = true;
		}
	}
	
	function render() {
		this.click_regions.clear();
		y = 10;
		this.render_button('http', 'images/http_test.png', 10, y, 226, 38);
		y += 50;
		this.render_button('user_data', 'images/user_data_test.png', 10, y, 226, 38);
		
		if (this.current_xy != null) {
			cx = this.current_xy[0];
			cy = this.current_xy[1];
			r = 15;
			for (i = 0; i < 6; ++i) {
				ang = i * 2 * 3.14159 / 6.0 + this.counter * 2 * 3.14159 / 60;
				dx = $floor($cos(ang) * r + cx);
				dy = $floor($sin(ang) * r + cy);
				$gfx_draw_ellipse(dx - 3, dy - 3, 6, 6, 0, 128, 255, 160);
			}
		}
		
		if (this.target_xy != null) {
			$gfx_draw_rectangle($floor(this.target_xy[0] - 2), $floor(this.target_xy[1] - 2), 4, 4, 255, 0, 0, 255);
		}
	}
	
	function render_button(click_id, path, x, y, width, height) {
		img = get_image(path);
		if (img == null) {
			$gfx_draw_rectangle(x, y, width, height, 128, 128, 128, 255);
		} else {
			$gfx_blit_image(img, x, y);
			width = img.width;
			height = img.height;
		}
		
		this.click_regions.add([click_id, x, y, width, height]);
	}
}


function main() {
	scene = new MainMenu();
	$game_initialize(60);
	$game_initialize_screen_scaled(500, 300, 1000, 600);
	$game_set_title("Test everything.");
	
	while (true) {
		scene.update();
		scene.render();
		
		if (scene.end_game) {
			break;
		}
		
		if (scene.next != null) {
			scene = scene.next;
		}
		
		$game_clock_tick();
	}
}


main();
